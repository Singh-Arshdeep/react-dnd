{"version":3,"sources":["kanban/HandleKanbanData.js","kanban/Task.js","kanban/Column.js","Modal/Modal.js","TaskForm/TaskForm.js","TaskForm/EditTaskForm.js","kanban/Kanban.js","App.js","serviceWorker.js","index.js"],"names":["initialData","tasks","columns","id","title","taskIds","columnOrder","useStyles","makeStyles","theme","root","display","margin","spacing","avatar","color","palette","getContrastText","deepOrange","backgroundColor","width","height","marginLeft","Task","props","classes","draggableId","task","index","provided","snapshot","className","draggableProps","dragHandleProps","ref","innerRef","onClick","handleEditTask","columnId","Avatar","assignedTo","taskName","style","fontSize","dueDate","toString","IconButton","aria-label","Column","column","handleAddNewTask","cursor","padding","position","droppableId","direction","droppableProps","map","key","placeholder","modal","alignItems","justifyContent","paper","background","boxShadow","shadows","borderRadius","KanbanModal","Modal","aria-labelledby","aria-describedby","open","modalStateOpen","onClose","handleModalClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","children","textField","paddingBottom","TaskForm","date","Date","setDate","getDate","useState","taskDetails","toLocaleDateString","setTask","users","setUsers","useEffect","fetch","method","headers","Accept","then","response","status","alert","json","data","catch","err","console","log","handleChange","event","name","value","target","prevState","onSubmit","handleAddNewTaskSubmit","TextField","label","onChange","required","TextareaAutosize","rowsMin","InputLabel","paddingTop","Select","native","labelId","hidden","user","user_id","split","utils","DateFnsUtils","DateTimePicker","disablePast","textAlign","Button","type","variant","closeModal","EditTaskForm","details","handleEditTaskSubmit","handleEditNewTaskDelete","Kanban","setData","fetchInitialData","result","moveTaskToNewColumn","_taskId","_columnId","taskId","body","JSON","stringify","setmodalStateOpen","currentColumnId","setCurrentColumnId","isItNewTask","setIsItNewTask","addNewTaskToDb","newTask","assignedUser","editTaskDetails","setEditTaskDetails","editColumnId","setEditColumnId","editTaskFromDb","_task","deleteTaskFromDb","task_id","proxyurl","Promise","resolve","reject","Object","keys","task_name","user_name","task_details","due_date","Error","onDragEnd","destination","source","newTaskIds","Array","from","splice","newColumn","sourceColumn","newSourceTaskIds","destinationColumn","newDestinationTaskIds","newSourceColumn","newDestinationColumn","onDragStart","colId","val","preventDefault","length","allTasks","numbOfTasks","newTaskId","hrs","getHours","mins","getMinutes","secs","getSeconds","milisecs","getMilliseconds","currentColumnTaskIds","updatedColumn","indexToDelete","indexOf","flexGrow","menuButton","marginRight","marginTop","App","AppBar","Toolbar","Typography","href","textDecoration","fontWeight","Chip","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3b889efa.chunk.js","sourcesContent":["\r\nconst initialData = {\r\n    tasks: {\r\n        // 'task-1': { id: 'task-1', taskName: 'Garbage', assignedTo: 'AU', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-2': { id: 'task-2', taskName: 'Cook dinner', assignedTo: 'YT', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-3': { id: 'task-3', taskName: 'Watch movie', assignedTo: 'AU', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-4': { id: 'task-4', taskName: 'Sleep', assignedTo: 'YT', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-5': { id: 'task-5', taskName: 'Groceries', assignedTo: 'BK', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-6': { id: 'task-6', taskName: 'Laundary', assignedTo: 'AU', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-7': { id: 'task-7', taskName: 'Party', assignedTo: 'YT', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-8': { id: 'task-8', taskName: 'Others', assignedTo: 'YT', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-9': { id: 'task-9', taskName: 'well', assignedTo: 'AU', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-10': { id: 'task-10', taskName: 'this', assignedTo: 'YT', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-11': { id: 'task-11', taskName: 'is', assignedTo: 'YT', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n        // 'task-12': { id: 'task-12', taskName: 'great', assignedTo: 'AU', details: 'loremlpsum', dueDate: '2020-03-03' },\r\n    },\r\n    columns: {\r\n        'column-1': {\r\n            id: 'column-1',\r\n            title: 'New Tasks',\r\n            taskIds: []\r\n        },\r\n        'column-2': {\r\n            id: 'column-2',\r\n            title: 'In Progress',\r\n            taskIds: [],\r\n        },\r\n        'column-3': {\r\n            id: 'column-3',\r\n            title: 'Completed',\r\n            taskIds: [],\r\n        }\r\n    },\r\n    columnOrder: ['column-1', 'column-2', 'column-3']\r\n};\r\n\r\n\r\nexport { initialData };","import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport './task.css';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    avatar: {\r\n        color: theme.palette.getContrastText(deepOrange[500]),\r\n        backgroundColor: '#F76C6C',\r\n        width: theme.spacing(4),\r\n        height: theme.spacing(4),\r\n        marginLeft: 5,\r\n    },\r\n}));\r\n\r\nexport default function Task(props) {\r\n\r\n    const whileDragging = {\r\n        backgroundColor: props => true ? \"green\" : \"red\"\r\n    }\r\n    const style = {\r\n        backgroundColor: 'blue',\r\n        fontSize: 18,\r\n        // ...provided.draggableProps.style,\r\n    };\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Draggable draggableId={props.task.id} index={props.index}>\r\n            {\r\n                (provided, snapshot) => (\r\n                    <div>\r\n                        <div className=\"item\"\r\n                            {...provided.draggableProps} {...provided.dragHandleProps} ref={provided.innerRef}\r\n                            onClick={()=>{props.handleEditTask(props.task, props.columnId)}}\r\n                        >\r\n                            <Avatar className={classes.avatar}>{props.task.assignedTo}</Avatar>\r\n                            {/* <Avatar className={classes.avatar} \r\n                            style={{backgroundColor:'purple'}}>A</Avatar> */}\r\n                            <div className='taskName'>\r\n                                <div>\r\n                                    <span>{props.task.taskName}</span>\r\n                                </div>\r\n                                <div>\r\n                                    <span style={{fontSize: '0.7em'}}>\r\n                                        {props.task.dueDate?<span>Due:</span>:\"\"}\r\n                                        {(props.task.dueDate).toString()}</span>\r\n                                </div>\r\n                            </div>\r\n                            <IconButton aria-label=\"More info\" color=\"secondary\">\r\n                                <MoreHorizIcon />\r\n                            </IconButton>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        </Draggable>\r\n    );\r\n}","import React from 'react';\r\nimport './column.css';\r\nimport Task from './Task';\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\n\r\nexport default function Column(props) {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"colDiv\">\r\n                <p className=\"colTitle\"> \r\n                    {props.column.title}\r\n                    {props.column.title=='New Tasks'\r\n                    ?<span onClick={props.handleAddNewTask} style={{cursor:\"pointer\"}}>\r\n                        <IconButton aria-label=\"Add\"  style={{padding:0, position:\"absolute\", marginLeft:5}}>\r\n                            <AddCircleIcon/>\r\n                        </IconButton>\r\n                    </span>\r\n                    :<span></span>}</p> \r\n\r\n                <Droppable droppableId={props.column.id} direction=\"vertical\">\r\n                    {\r\n                        (provided, snapshot) => (\r\n                            <div className=\"taskList\" ref={provided.innerRef}\r\n                            {...provided.droppableProps}>\r\n                                {props.tasks.map((task,index) => <Task \r\n                                key={task.id} task={task} \r\n                                handleEditTask = {props.handleEditTask}\r\n                                index={index}\r\n                                columnId={props.column.id}/>)}\r\n                            {provided.placeholder}\r\n                            </div>\r\n                        )\r\n                    }\r\n                </Droppable>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\n\r\n//Modal Styles\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        // border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        borderRadius: 5,\r\n        padding: 50,\r\n    },\r\n}));\r\n\r\n\r\nexport default function KanbanModal(props) {\r\n    const classes =  useStyles();\r\n    return (\r\n        <div>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={props.modalStateOpen}\r\n                onClose={props.handleModalClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={props.modalStateOpen}>\r\n                    <div className={classes.paper}>\r\n                        {props.children}\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n\r\n\r\n    );\r\n}","import React, { useState, useEffect, useContext, newContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    paddingBottom: 20,\r\n  },\r\n}));\r\n\r\nexport default function TaskForm(props) {\r\n  var date = new Date();\r\n  date.setDate(date.getDate() + 1);\r\n  const classes = useStyles();\r\n  const [task, setTask] = useState({\r\n    taskName: \"\",\r\n    taskDetails: \"\",\r\n    assignedTo: \"\",\r\n    dueDate: date.toLocaleDateString(\"en-US\"),\r\n  });\r\n\r\n  const [users, setUsers] = useState([]);\r\n  useEffect(() => {\r\n    let url = \"https://server.taskiton.wmdd.ca/userlist\";\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.status >= 400) {\r\n          alert(\"Error - refresh page and try again\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        //console.log(data);\r\n        setUsers(data);\r\n      })\r\n      .catch(function (err) {\r\n        alert(\"Error - refresh page and try again\");\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  let handleChange = (event) => {\r\n    let name = \"\";\r\n    let value = \"\";\r\n    if (typeof event.target !== \"undefined\") {\r\n      name = event.target.name;\r\n      value = event.target.value;\r\n    } else {\r\n      name = \"dueDate\";\r\n      value = event.toLocaleDateString(\"en-US\");\r\n    }\r\n\r\n    setTask((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [name]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(event) => {\r\n        props.handleAddNewTaskSubmit(task, event);\r\n      }}\r\n    >\r\n      <div>\r\n        <TextField\r\n          id=\"standard-secondary\"\r\n          label=\"Task Name\"\r\n          color=\"primary\"\r\n          value={task.taskName}\r\n          onChange={handleChange}\r\n          className={classes.textField}\r\n          name=\"taskName\"\r\n          required\r\n        />\r\n      </div>\r\n      <div>\r\n        {/* <InputLabel id=\"demo-simple-select-label\" style={{paddingTop:'5%'}}>Task Details</InputLabel> */}\r\n        <TextareaAutosize\r\n          aria-label=\"minimum height\"\r\n          rowsMin={3}\r\n          placeholder=\"Enter Task Details\"\r\n          value={task.taskDetails}\r\n          onChange={handleChange}\r\n          className={classes.textField}\r\n          name=\"taskDetails\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <InputLabel\r\n          id=\"demo-simple-select-label\"\r\n          style={{ paddingTop: \"8%\", paddingBottom: \"3%\" }}\r\n        >\r\n          Assign To\r\n        </InputLabel>\r\n        <Select\r\n          native\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={task.assignedTo}\r\n          onChange={handleChange}\r\n          name=\"assignedTo\"\r\n          required\r\n        >\r\n          <option value=\"\" hidden>\r\n            Select a user\r\n          </option>\r\n          {users.map((user) => (\r\n            <option key={user.user_id} value={user.name}>\r\n              {user.name.split(\" \")[0]}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      </div>\r\n      <div>\r\n        <InputLabel\r\n          id=\"demo-simple-select-label\"\r\n          style={{ paddingTop: \"10%\", paddingBottom: \"3%\" }}\r\n        >\r\n          Due Date:\r\n        </InputLabel>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n          <DateTimePicker\r\n            value={task.dueDate}\r\n            onChange={handleChange}\r\n            name=\"dueDate\"\r\n            disablePast\r\n          />\r\n        </MuiPickersUtilsProvider>\r\n      </div>\r\n      <br />\r\n      <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n        {/* <input type=\"submit\" value=\"Submit\" /> */}\r\n        <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n          Save\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          style={{ marginLeft: \"5%\" }}\r\n          onClick={props.closeModal}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport { DateTimePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport TextareaAutosize from \"@material-ui/core/TextareaAutosize\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  textField: {\r\n    paddingBottom: 20,\r\n    width: \"15vw\",\r\n  },\r\n  paper: {\r\n    margin: \"100px\",\r\n  },\r\n}));\r\n\r\nexport default function EditTaskForm(props) {\r\n  const classes = useStyles();\r\n\r\n  const [task, setTask] = useState({\r\n    taskName: props.task.taskName,\r\n    taskDetails: props.task.details,\r\n    assignedTo: props.task.assignedTo,\r\n    dueDate: props.task.dueDate,\r\n  });\r\n\r\n  let handleChange = (event) => {\r\n    let name = \"\";\r\n    let value = \"\";\r\n    if (typeof event.target !== \"undefined\") {\r\n      name = event.target.name;\r\n      value = event.target.value;\r\n    } else {\r\n      name = \"dueDate\";\r\n      value = event.toLocaleDateString(\"en-US\");\r\n    }\r\n    setTask((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        [name]: value,\r\n      };\r\n    });\r\n  };\r\n\r\n  const [users, setUsers] = useState([]);\r\n  useEffect(() => {\r\n    let url = \"https://server.taskiton.wmdd.ca/userlist\";\r\n    fetch(url, {\r\n      method: \"GET\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n      .then((response) => {\r\n        if (response.status >= 400) {\r\n          alert(\"Error - refresh page and try again\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        //console.log(data);\r\n        setUsers(data);\r\n      })\r\n      .catch(function (err) {\r\n        alert(\"Error - refresh page and try again\");\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <form\r\n        onSubmit={(event) => {\r\n          props.handleEditTaskSubmit(task, event, props.task.id);\r\n        }}\r\n      >\r\n        <div>\r\n          <TextField\r\n            id=\"standard-secondary\"\r\n            label=\"Task Name\"\r\n            color=\"primary\"\r\n            value={task.taskName}\r\n            onChange={handleChange}\r\n            className={classes.textField}\r\n            name=\"taskName\"\r\n          />\r\n        </div>\r\n        <div>\r\n          {/* <InputLabel id=\"demo-simple-select-label\" style={{paddingTop:'5%'}}>Task Details</InputLabel> */}\r\n          <TextareaAutosize\r\n            aria-label=\"minimum height\"\r\n            rowsMin={3}\r\n            placeholder=\"Enter Details\"\r\n            value={task.taskDetails}\r\n            onChange={handleChange}\r\n            className={classes.textField}\r\n            name=\"taskDetails\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <InputLabel\r\n            id=\"demo-simple-select-label\"\r\n            style={{ paddingTop: \"8%\", paddingBottom: \"3%\" }}\r\n          >\r\n            Assign To\r\n          </InputLabel>\r\n          <Select\r\n            native\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={task.assignedTo}\r\n            onChange={handleChange}\r\n            name=\"assignedTo\"\r\n            required\r\n          >\r\n            <option value=\"\" hidden>\r\n              Select a user\r\n            </option>\r\n            {users.map((user) => (\r\n              <option\r\n                key={user.user_id}\r\n                value={user.name.split(\" \")[0][0] + user.name.split(\" \")[1][0]}\r\n              >\r\n                {user.name.split(\" \")[0]}\r\n              </option>\r\n            ))}\r\n          </Select>\r\n        </div>\r\n        <div>\r\n          <InputLabel\r\n            id=\"demo-simple-select-label\"\r\n            style={{ paddingTop: \"10%\", paddingBottom: \"3%\" }}\r\n          >\r\n            Due Date:\r\n          </InputLabel>\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <DateTimePicker\r\n              value={task.dueDate}\r\n              onChange={handleChange}\r\n              name=\"dueDate\"\r\n              disablePast\r\n            />\r\n          </MuiPickersUtilsProvider>\r\n        </div>\r\n        <br />\r\n        <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n          {/* <input type=\"submit\" value=\"Submit\" /> */}\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Save\r\n          </Button>\r\n          <Button\r\n            variant=\"contained\"\r\n            style={{ marginLeft: \"5%\" }}\r\n            onClick={props.closeModal}\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </form>\r\n      <br />\r\n      <div style={{ width: \"100%\", textAlign: \"center\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          onClick={() => {\r\n            props.handleEditNewTaskDelete(props.task.id);\r\n          }}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </div>\r\n      {/* <input type=\"button\" value=\"Delete\"\r\n                onClick={() => { props.handleEditNewTaskDelete(props.task.id) }} /> */}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useContext, newContext } from \"react\";\r\nimport { initialData } from \"./HandleKanbanData\";\r\nimport Column from \"./Column\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport KanbanModal from \"../Modal/Modal\";\r\nimport TaskForm from \"../TaskForm/TaskForm\";\r\nimport EditTaskForm from \"../TaskForm/EditTaskForm\";\r\n\r\nexport default function Kanban() {\r\n  // const newContext = React.createContext({ color: 'black' });\r\n\r\n  const [data, setData] = useState(null);\r\n  //Fetch initial data\r\n  useEffect(() => {\r\n    let promise = fetchInitialData();\r\n\r\n    promise.then((result) => {\r\n      setData(initialData);\r\n    });\r\n  }, []);\r\n\r\n  let onDragEnd = (result) => {\r\n    //console.log(result);\r\n    const { destination, source, draggableId } = result;\r\n\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    //Task dropped at the same position\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (source.droppableId === destination.droppableId) {\r\n      //console.log(\"Moving in the same column\");\r\n      const column = data.columns[source.droppableId];\r\n      const newTaskIds = Array.from(column.taskIds);\r\n      newTaskIds.splice(source.index, 1);\r\n      newTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newColumn = {\r\n        ...column,\r\n        taskIds: newTaskIds,\r\n      };\r\n\r\n      setData((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          columns: {\r\n            ...prevState.columns,\r\n            [newColumn.id]: newColumn,\r\n          },\r\n        };\r\n      });\r\n    } else if (destination !== null) {\r\n      //console.log(\"Moving to new column\");\r\n      const sourceColumn = data.columns[source.droppableId];\r\n      const newSourceTaskIds = sourceColumn.taskIds;\r\n      newSourceTaskIds.splice(source.index, 1);\r\n\r\n      const destinationColumn = data.columns[destination.droppableId];\r\n      const newDestinationTaskIds = destinationColumn.taskIds;\r\n      newDestinationTaskIds.splice(destination.index, 0, draggableId);\r\n\r\n      const newSourceColumn = {\r\n        ...sourceColumn,\r\n        taskIds: newSourceTaskIds,\r\n      };\r\n\r\n      const newDestinationColumn = {\r\n        ...destinationColumn,\r\n        taskIds: newDestinationTaskIds,\r\n      };\r\n      setData((prevState) => {\r\n        return {\r\n          ...prevState,\r\n          columns: {\r\n            ...prevState.columns,\r\n            [newSourceColumn.id]: newSourceColumn,\r\n            [newDestinationColumn.id]: newDestinationColumn,\r\n          },\r\n        };\r\n      });\r\n      moveTaskToNewColumn(draggableId, destination);\r\n    }\r\n    //document.body.style.color = \"black\";\r\n    //Call server to update here\r\n  };\r\n\r\n  let onDragStart = () => {\r\n    //document.body.style.color = \"red\";\r\n  };\r\n\r\n  // let handleAddNewTask = () => {\r\n  //     setOpen(true);\r\n  // }\r\n\r\n  let moveTaskToNewColumn = (_taskId, _columnId) => {\r\n    var data = {\r\n      taskId: _taskId,\r\n      columnId: _columnId.droppableId.split(\"-\")[1],\r\n    };\r\n    let url = \"https://server.taskiton.wmdd.ca/movetask\";\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => {\r\n        //console.log(response);\r\n        if (response.status >= 400) {\r\n          //alert(\"Error - refresh page and try moving again\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        //console.log(data);\r\n      })\r\n      .catch(function (err) {\r\n        //alert(\"Error - refresh page and try moving again\");\r\n        //console.log(err);\r\n      });\r\n  };\r\n\r\n  /*************************************************************/\r\n  /*************************************************************/\r\n  // Modal Handle\r\n  const [modalStateOpen, setmodalStateOpen] = useState(false);\r\n\r\n  const handleModalClose = () => {\r\n    setmodalStateOpen(false);\r\n  };\r\n  /*************************************************************/\r\n  //Could have named the following states better:\r\n  const [currentColumnId, setCurrentColumnId] = useState(\"\");\r\n\r\n  const [isItNewTask, setIsItNewTask] = useState(true);\r\n\r\n  /*************************************************************/\r\n  /*************************************************************/\r\n  //Adding new task\r\n\r\n  let handleAddNewTask = (colId) => {\r\n    setIsItNewTask(true);\r\n    setmodalStateOpen(true);\r\n    setCurrentColumnId(colId);\r\n  };\r\n\r\n  let handleAddNewTaskSubmit = (val, event) => {\r\n    event.preventDefault();\r\n    if (val.taskName.length < 1) {\r\n      setmodalStateOpen(false);\r\n      return;\r\n    }\r\n\r\n    const allTasks = data.tasks;\r\n\r\n    let numbOfTasks = Object.keys(allTasks).length;\r\n    let newTaskId = \"\";\r\n    var date = new Date();\r\n    var hrs = date.getHours();\r\n    var mins = date.getMinutes();\r\n    var secs = date.getSeconds();\r\n    var milisecs = date.getMilliseconds();\r\n    if (numbOfTasks > 0) {\r\n      newTaskId =\r\n        \"task-\" +\r\n        ++Array.from(Object.keys(allTasks))[numbOfTasks - 1].split(\"-\")[1] +\r\n        \"-\" +\r\n        hrs +\r\n        mins +\r\n        secs +\r\n        milisecs;\r\n    } else {\r\n      newTaskId = \"task-\" + hrs + \"-\" + hrs + mins + secs + milisecs;\r\n    }\r\n\r\n    let assignedUser = \"\";\r\n    if (val.assignedTo)\r\n      assignedUser =\r\n        val.assignedTo.split(\" \")[0].split(\"\")[0] +\r\n        val.assignedTo.split(\" \")[1].split(\"\")[0];\r\n    const newTask = {\r\n      id: newTaskId,\r\n      taskName: val.taskName,\r\n      details: val.taskDetails,\r\n      assignedTo: assignedUser,\r\n      dueDate: val.dueDate,\r\n    };\r\n    allTasks[newTaskId] = newTask; // update the state\r\n\r\n    //Updating the column\r\n    const currentColumnTaskIds = data.columns[currentColumnId].taskIds;\r\n    currentColumnTaskIds.splice(currentColumnTaskIds.length, 0, newTaskId);\r\n    //console.log(currentColumnTaskIds);\r\n\r\n    //lets replace the whole column with new ids\r\n    let updatedColumn = {\r\n      ...data.columns[currentColumnId],\r\n      taskIds: currentColumnTaskIds,\r\n    };\r\n\r\n    //Updating state\r\n    setData((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        tasks: allTasks,\r\n        columns: {\r\n          ...prevState.columns,\r\n          [currentColumnId]: updatedColumn,\r\n        },\r\n      };\r\n    });\r\n    addNewTaskToDb(newTask, val.assignedTo);\r\n    setmodalStateOpen(false);\r\n  };\r\n\r\n  let addNewTaskToDb = (newTask, assignedUser) => {\r\n    var data = {\r\n      ...newTask,\r\n      assignedTo: assignedUser,\r\n      columnId: 1,\r\n    };\r\n    //console.log(data);\r\n    let url = \"https://server.taskiton.wmdd.ca/tasks\";\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => {\r\n        //console.log(response);\r\n        if (response.status >= 400) {\r\n          alert(\"Error - refresh page and try again\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        //console.log(data);\r\n      })\r\n      .catch(function (err) {\r\n        alert(\"Error - refresh page and try again\");\r\n        //console.log(err);\r\n      });\r\n  };\r\n  /*************************************************************/\r\n\r\n  /*************************************************************/\r\n  /*************************************************************/\r\n\r\n  const [editTaskDetails, setEditTaskDetails] = useState(\"\");\r\n  const [editColumnId, setEditColumnId] = useState(\"\");\r\n\r\n  //Edit Task Details\r\n  let handleEditTask = (task, columnId) => {\r\n    setIsItNewTask(false);\r\n    setmodalStateOpen(true);\r\n    setEditTaskDetails(task);\r\n    setEditColumnId(columnId);\r\n  };\r\n\r\n  //Editing task details\r\n  let handleEditTaskSubmit = (task, event, _taskId) => {\r\n    event.preventDefault();\r\n\r\n    const allTasks = data.tasks;\r\n    allTasks[_taskId] = {\r\n      id: _taskId,\r\n      taskName: task.taskName,\r\n      details: task.taskDetails,\r\n      assignedTo: task.assignedTo,\r\n      dueDate: task.dueDate,\r\n    };\r\n\r\n    setData((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        tasks: allTasks,\r\n      };\r\n    });\r\n\r\n    setmodalStateOpen(false);\r\n    editTaskFromDb(allTasks[_taskId]);\r\n  };\r\n\r\n  let editTaskFromDb = (_task) => {\r\n    let url = \"https://server.taskiton.wmdd.ca/updatetask\";\r\n    fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(_task),\r\n    })\r\n      .then((response) => {\r\n        //console.log(response);\r\n        if (response.status >= 400) {\r\n          alert(\"Error - refresh page and try again\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        //console.log(data);\r\n      })\r\n      .catch(function (err) {\r\n        alert(\"Error - refresh page and try again\");\r\n        //console.log(err);\r\n      });\r\n  };\r\n\r\n  /*************************************************************/\r\n  /*************************************************************/\r\n  //Delete the card\r\n  let handleEditNewTaskDelete = (_taskId) => {\r\n    const allTasks = data.tasks;\r\n    delete allTasks[_taskId];\r\n\r\n    const currentColumnTaskIds = data.columns[editColumnId].taskIds;\r\n    const indexToDelete = currentColumnTaskIds.indexOf(_taskId);\r\n    currentColumnTaskIds.splice(indexToDelete, 1);\r\n\r\n    const newColumn = {\r\n      ...data.columns[editColumnId],\r\n      taskIds: currentColumnTaskIds,\r\n    };\r\n\r\n    setData((prevState) => {\r\n      return {\r\n        ...prevState,\r\n        tasks: allTasks,\r\n        columns: {\r\n          ...prevState.columns,\r\n          [editColumnId]: newColumn,\r\n        },\r\n      };\r\n    });\r\n    setmodalStateOpen(false);\r\n    deleteTaskFromDb(_taskId);\r\n  };\r\n\r\n  let deleteTaskFromDb = (_taskId) => {\r\n    var data = {\r\n      task_id: _taskId,\r\n    };\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    let url = \"https://server.taskiton.wmdd.ca/tasks\";\r\n    fetch(proxyurl + url, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        Accept: \"application/json, text/plain, */*\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    })\r\n      .then((response) => {\r\n        //console.log(response);\r\n        if (response.status >= 400) {\r\n          alert(\"Error - refresh page and try again\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        //console.log(data);\r\n      })\r\n      .catch(function (err) {\r\n        alert(\"Error - refresh page and try again\");\r\n        //console.log(err);\r\n      });\r\n  };\r\n\r\n  /*************************************************************/\r\n  /*************************************************************/\r\n  let fetchInitialData = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n      const url = \"https://server.taskiton.wmdd.ca/tasks\";\r\n      fetch(proxyurl + url, {\r\n        \"X-Requested-With\": \"XMLHttpRequest\",\r\n      })\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          Object.keys(data).map((task) => {\r\n            initialData.tasks = {\r\n              ...initialData.tasks,\r\n              [task]: {\r\n                id: data[task].task_id,\r\n                taskName: data[task].task_name,\r\n                assignedTo:\r\n                  data[task].user_name.split(\" \")[0][0] +\r\n                  data[task].user_name.split(\" \")[1][0],\r\n                details: data[task].task_details,\r\n                dueDate: data[task].due_date,\r\n              },\r\n            };\r\n          });\r\n          fetch(\"https://server.taskiton.wmdd.ca/columnmapping\")\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n              Object.keys(data).map((column) => {\r\n                initialData.columns = {\r\n                  ...initialData.columns,\r\n                  [column]: {\r\n                    ...initialData.columns[column],\r\n                    taskIds: data[column],\r\n                  },\r\n                };\r\n                //console.log(column);\r\n              });\r\n              if (data) resolve(\"Promise resolved successfully\");\r\n              else reject(Error(\"Promise rejected\"));\r\n            });\r\n          //console.log(initialData);\r\n        });\r\n    });\r\n  };\r\n\r\n  /*************************************************************/\r\n  /*************************************************************/\r\n  let closeModal = () => {\r\n    setmodalStateOpen(false);\r\n  };\r\n  /*************************************************************/\r\n  /*************************************************************/\r\n  /*************************************************************/\r\n  if (!data) {\r\n    return <div />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <DragDropContext onDragEnd={onDragEnd} onDragStart={onDragStart}>\r\n        {data.columnOrder.map((columnId) => {\r\n          let column = data.columns[columnId];\r\n          let tasks = column.taskIds.map((taskId) => data.tasks[taskId]);\r\n\r\n          return (\r\n            <Column\r\n              key={column.id}\r\n              column={column}\r\n              tasks={tasks}\r\n              handleAddNewTask={() => {\r\n                handleAddNewTask(column.id);\r\n              }}\r\n              handleEditTask={handleEditTask}\r\n            />\r\n          );\r\n        })}\r\n      </DragDropContext>\r\n      <KanbanModal\r\n        modalStateOpen={modalStateOpen}\r\n        handleModalClose={handleModalClose}\r\n      >\r\n        {isItNewTask ? (\r\n          <TaskForm\r\n            handleAddNewTaskSubmit={handleAddNewTaskSubmit}\r\n            closeModal={closeModal}\r\n          />\r\n        ) : (\r\n          <EditTaskForm\r\n            task={editTaskDetails}\r\n            handleEditTaskSubmit={handleEditTaskSubmit}\r\n            handleEditNewTaskDelete={handleEditNewTaskDelete}\r\n            closeModal={closeModal}\r\n          />\r\n        )}\r\n      </KanbanModal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Kanban from \"./kanban/Kanban\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Chip from \"@material-ui/core/Chip\";\n\nimport \"./App.css\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    height: 50,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    marginTop: -10,\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <AppBar position=\"static\" style={{ height: \"120%\" }}>\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Kanban Task Manager\n            </Typography>\n            <Button color=\"inherit\">\n              <a\n                href=\"https://www.taskiton.wmdd.ca/#/signup\"\n                target=\"_blank\"\n                style={{\n                  color: \"white\",\n                  textDecoration: \"none\",\n                  fontWeight: \"bold\",\n                  marginTop: \"-10\",\n                }}\n              >\n                Signup\n              </a>\n            </Button>\n          </Toolbar>\n        </AppBar>\n      </div>\n      <Chip\n        label=\"Signup to add your name in the list\"\n        style={{\n          position: \"absolute\",\n          marginLeft: \"12px\",\n          fontWeight: \"bold\",\n          textAlign: \"center\",\n          margin: \"auto\",\n          width: \"100%\",\n        }}\n        color=\"secondary\"\n      />\n      <Kanban />\n    </div>\n  );\n}\n\n//npm install react-beautiful-dnd\n//npm i styled-components\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}